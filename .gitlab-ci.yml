stages:
  - Check
  - Build
  - Upload
  - Release

check-version:
  stage: Check
  image: node:16
  script:
    - apt-get update && apt-get install -y jq
    - export PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
    - export CURRENT_VERSION=$(jq -r '.version' package.json)
    - |
      echo "Previous Version: $PREVIOUS_VERSION"
      echo "Current Version: $CURRENT_VERSION"
      if [ "$PREVIOUS_VERSION" = "$CURRENT_VERSION" ]; then echo "Version has not changed. Skipping pipeline."; exit 1; fi
    - echo "Version has changed. Proceeding with the pipeline."
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run only on push to master

build:
  stage: Build
  image: electronuserland/builder:wine
  before_script:
    - npm install --force
  script:
    - export VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "VERSION=$VERSION" >> variables.env
    - export APPNAME=$(node -e "console.log(require('./package.json').productName)")
    - echo "APPNAME=$APPNAME" >> variables.env
    - npm run electron:publish
    - ls -alh $CI_PROJECT_DIR/dist
  artifacts:
    reports:
      dotenv: variables.env
    name: $CI_COMMIT_REF_SLUG
    paths:
      - $CI_PROJECT_DIR/dist/*.*
    when: on_success
  needs:
    - check-version
  only:
    - master # Run only on push to master

variables:
  WIN_BINARY: "${APPNAME}-${VERSION}.exe"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${APPNAME}/${VERSION}"

upload:
  stage: Upload
  needs:
    - check-version
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  when: always
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/${WIN_BINARY}" "${PACKAGE_REGISTRY_URL}/${WIN_BINARY}"'

auto-release:
  stage: Release
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - check-version
    - build
    - upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  when: always
  script:
    - echo "Release $VERSION"
    - |
      release-cli create --name "Release $VERSION" --tag-name v$VERSION \
      --description 'Created using the release-cli. $CI_COMMIT_TITLE' --ref $CI_COMMIT_SHA \
      --assets-link "{\"name\":\"${APPNAME}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${WIN_BINARY}\"}"
